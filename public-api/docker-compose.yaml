
version: "3.4"

# x- indicates an "extension", so docker-compose will ignore the attribute. The
# name is not important, it's just the necessary syntax to create a YAML anchor
# for reuse across the below services.
x-api-defaults: &api-defaults
  # This image label exists for documentation purposes only, e.g. to identify
  # it via `docker images`. We do not actually push this image up to DockerHub.
  # Since docker-compose should never find this image remotely, it will rebuild
  # it from the provided build context or use a cached local version.
  # When making changes to this image, you can modify this tag to force all devs
  # to rebuild.
  image: allofustest/workbench-dev-api:local-3
  build:
    context: ./src/dev/server
  user: ${UID}
  working_dir: /w/public-api
  environment:
    - GOOGLE_APPLICATION_CREDENTIALS=/w/public-api/sa-key.json
  env_file:
    - db/vars.env
  volumes:
    - db-sync:/w:nocopy
    - gradle-cache:/.gradle
    - ~/.config:/.config:cached
    - ~/.gsutil:/.gsutil:cached

services:
  scripts:
    <<: *api-defaults
  db:
    image: mysql:5.7
    platform: linux/amd64
    env_file:
      - db/vars.env
    volumes:
      - db:/var/lib/mysql
    ports:
      - 127.0.0.1:3306:3306

  public-api:
    <<: *api-defaults
    command: ./gradlew --daemon appengineRun
    ports:
      - 127.0.0.1:8083:8083
      - 127.0.0.1:8084:8002

  db-scripts:
    <<: *api-defaults
    depends_on:
      - db
    working_dir: /w/public-api/db
    entrypoint: [ 'with-uid.sh', 'wait-for', 'db:3306', -- ]

  api-scripts:
    <<: *api-defaults
    depends_on:
      - db

  cdr-scripts:
    <<: *api-defaults
    depends_on:
      - db
    working_dir: /w/public-api/db-cdr
    entrypoint: [ 'with-uid.sh', 'wait-for', 'db:3306', -- ]

  db-generate-public-cdr-counts:
    <<: *api-defaults
    depends_on:
      - db
    working_dir: /w/public-api/db-cdr
    entrypoint: ["./generate-cdr/generate-public-cdr-counts.sh"]
    env_file:
      - db-cdr/vars.env

  db-generate-cloudsql-db:
    <<: *api-defaults
    depends_on:
      - db
    working_dir: /w/public-api/db-cdr
    entrypoint: ["./generate-cdr/generate-cloudsql-db.sh"]
    env_file:
      - db-cdr/vars.env

  db-generate-local-cdr-db:
    <<: *api-defaults
    depends_on:
      - db
    working_dir: /w/public-api/db-cdr

    entrypoint: ["./generate-cdr/generate-local-cdr-db.sh"]
    env_file:
      - db-cdr/vars.env

  db-generate-local-count-dbs:
    <<: *api-defaults
    depends_on:
      - db
    working_dir: /w/public-api/db-cdr
    entrypoint: ["./generate-cdr/generate-local-count-dbs.sh"]
    env_file:
      - db-cdr/vars.env

  db-mysqldump-local-db:
    <<: *api-defaults
    depends_on:
      - db
    working_dir: /w/public-api/db-cdr
    entrypoint: ["./generate-cdr/make-mysqldump.sh"]
    env_file:
      - db-cdr/vars.env

  db-cloudsql-import:
    <<: *api-defaults
    working_dir: /w/public-api/db-cdr
    entrypoint: ["./generate-cdr/cloudsql-import.sh"]

  db-local-mysql-import:
    <<: *api-defaults
    working_dir: /w/public-api/db-cdr
    entrypoint: ["./generate-cdr/local-mysql-import.sh"]

volumes:
  db:
  gradle-cache:
  gradle-public-api-cache:
  db-sync:
    external: true