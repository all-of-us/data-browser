// Gradle targets for tools, used by Ruby commands and docker-compose.

ext['hibernate.version'] = '5.2.10.Final'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

def db_host = System.getenv("DB_HOST")
def db_port = System.getenv("DB_PORT")
def workbench_db_user = System.getenv("WORKBENCH_DB_USER")
def workbench_db_password = System.getenv("WORKBENCH_DB_PASSWORD")

def dbProperties = [
  'spring.datasource.driver-class-name': 'com.mysql.jdbc.Driver',
  // Our database isn't configured to allow outside connections (which is good), so our connections
  // are either local or through the proxy, which encrypts all traffic.
  'spring.datasource.url': "jdbc:mysql://${db_host}:${db_port}/workbench?useSSL=false",
  'spring.datasource.username': '${workbench_db_user}',
  'spring.datasource.password': '${workbench_db_password}'
]

// Run this via ./project.rb update-cloud-config or (locally) docker-compose run update-config,
// which is automatically run during api/project.rb dev-up.
task loadConfig(type: JavaExec) {
  classpath sourceSets.main.runtimeClasspath
  main = "org.pmiops.workbench.tools.ConfigLoader"
  systemProperties = dbProperties
  args config_key, config_file
}

task updateCdrVersions(type: JavaExec) {
  classpath sourceSets.main.runtimeClasspath
  main = "org.pmiops.workbench.tools.UpdateCdrVersions"
  systemProperties = dbProperties
  if (project.hasProperty("appArgs")) {
    args Eval.me(appArgs)
  }
}

buildscript {    // Configuration for building
  repositories {
    jcenter()    // Bintray's repository - a fast Maven Central mirror & more
  }
  dependencies {
    classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.3.RELEASE'
  }
}


sourceSets {
  main {
    java {
      srcDirs = ['src/main/java', '../src/main/java', '../src/generated/java',
                 '../../common-api/src/main/java']
      includes = ['org/pmiops/workbench/tools/**/*.java',
                  'org/pmiops/workbench/db/**/*.java',
                  // In general, command-line tools won't need access to
                  // org.pmiops.workbench.model (Swagger-generated classes),
                  // so we selectively whitelist as needed.
                  'org/pmiops/workbench/config/CdrBigQuerySchemaConfig.java',
                  'org/pmiops/workbench/config/WorkbenchConfig.java',
                  'org/pmiops/workbench/model/Authority.java',
                  'org/pmiops/workbench/model/BlockscoreVerificationStatus.java',
                  'org/pmiops/workbench/model/BillingProjectStatus.java',
                  'org/pmiops/workbench/model/ContactEmailTakenResponse.java',
                  'org/pmiops/workbench/model/DataAccessLevel.java',
                  'org/pmiops/workbench/model/EmailVerificationStatus.java',
                  'org/pmiops/workbench/model/ErrorCode.java',
                  'org/pmiops/workbench/model/ErrorResponse.java',
                  'org/pmiops/workbench/model/WorkspaceAccessLevel.java',
                  'org/pmiops/workbench/model/CohortStatus.java',
                  'org/pmiops/workbench/model/CohortReview.java',
                  'org/pmiops/workbench/model/Domain.java',
                  'org/pmiops/workbench/model/PageVisit.java',
                  'org/pmiops/workbench/model/ParticipantCohortStatus.java',
                  'org/pmiops/workbench/model/ReviewStatus.java',
                  'org/pmiops/workbench/model/UnderservedPopulationEnum.java',
                  'org/pmiops/workbench/model/AnnotationType.java']
      excludes = ['org/pmiops/workbench/db/dao/ConceptSetService.java',
                  'org/pmiops/workbench/db/dao/UserService.java',
                  'org/pmiops/workbench/db/dao/WorkspaceService.java',
                  'org/pmiops/workbench/db/dao/WorkspaceServiceImpl.java',
                  'org/pmiops/workbench/db/dao/ParticipantCohortStatusDao.java',
                  'org/pmiops/workbench/db/dao/ParticipantCohortStatusDaoImpl.java',
                  'org/pmiops/workbench/db/dao/UserRecentResourceServiceImpl.java',
                  'org/pmiops/workbench/cohortreview/util/*.java',
                  'org/pmiops/workbench/model/Filter.java',
                  'org/pmiops/workbench/model/Operator.java',
                  'org/pmiops/workbench/model/ParticipantCohortStatusColumns.java',
                  'org/pmiops/workbench/model/SortOrder.java',
                  'org/pmiops/workbench/db/dao/CohortService.java',
                  'org/pmiops/workbench/db/dao/ParticipantCohortStatusDaoCustom.java']
    }
  }
}

compileJava.dependsOn ':generateApi'

repositories {   // repositories for Jar's you access in your code
  jcenter()
}


dependencies {
  compile 'org.springframework.boot:spring-boot-starter-data-jpa'
  compile 'commons-io:commons-io:2.6'
  compile 'joda-time:joda-time:2.10'
  compile 'com.github.fge:json-patch:1.9'
  compile 'io.swagger:swagger-annotations:1.5.9'
  compile 'com.google.cloud.sql:mysql-socket-factory:1.0.9'
  compile 'org.apache.commons:commons-lang3:3.0'
  compile 'com.google.code.gson:gson:2.8.5'
  compile 'org.hibernate:hibernate-validator:5.3.5.Final'
  compile 'com.squareup.okhttp:okhttp:2.7.5'
  compile 'com.squareup.okhttp:logging-interceptor:2.7.5'
  compile 'org.hibernate:hibernate-core:5.2.10.Final'
}


gradle.taskGraph.afterTask { Task task, TaskState state ->
  if (state.failure && task.path == ":tools:compileJava") {
    logger.warn(
      "\n\n*** Tools compilation failed. ***\nIf the failure is due to a missing class, ensure" +
      " the class is included in the sourceSets section of tools/build.gradle.\n"
    )
  }
}
