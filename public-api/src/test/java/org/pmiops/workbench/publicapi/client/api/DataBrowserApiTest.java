/*
 * AllOfUs Public API
 * The API for the AllOfUs data browser and public storefront.
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.pmiops.workbench.publicapi.client.api;

import org.pmiops.workbench.publicapi.client.ApiException;
import org.pmiops.workbench.publicapi.client.model.AchillesResult;
import org.pmiops.workbench.publicapi.client.model.Analysis;
import org.pmiops.workbench.publicapi.client.model.AnalysisListResponse;
import org.pmiops.workbench.publicapi.client.model.CdrVersion;
import org.pmiops.workbench.publicapi.client.model.ConceptAnalysisListResponse;
import org.pmiops.workbench.publicapi.client.model.ConceptListResponse;
import org.pmiops.workbench.publicapi.client.model.CountAnalysis;
import org.pmiops.workbench.publicapi.client.model.CriteriaListResponse;
import org.pmiops.workbench.publicapi.client.model.CriteriaParentResponse;
import org.pmiops.workbench.publicapi.client.model.DomainInfosAndSurveyModulesResponse;
import org.pmiops.workbench.publicapi.client.model.SurveyMetadataListResponse;
import org.pmiops.workbench.publicapi.client.model.SearchConceptsRequest;
import org.pmiops.workbench.publicapi.client.model.SurveyQuestionFetchResponse;
import org.pmiops.workbench.publicapi.client.model.SurveyVersionCountResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataBrowserApi
 */
@Ignore
public class DataBrowserApiTest {

    private final DataBrowserApi api = new DataBrowserApi();

    
    /**
     * 
     *
     * Gets the cdr versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCdrVersionUsedTest() throws ApiException {
        CdrVersion response = api.getCdrVersionUsed();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets analysis results for concept
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConceptAnalysisResultsTest() throws ApiException {
        List<String> conceptIds = null;
        String domainId = null;
        ConceptAnalysisListResponse response = api.getConceptAnalysisResults(conceptIds, domainId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets EHR biological sex and age count analysis
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCountAnalysisTest() throws ApiException {
        String domainId = null;
        String domainDesc = null;
        CountAnalysis response = api.getCountAnalysis(domainId, domainDesc);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets the children when parent concept is expanded in ui
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCriteriaChildrenTest() throws ApiException {
        Long parentId = null;
        CriteriaListResponse response = api.getCriteriaChildren(parentId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets the rolled up count from criteria
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCriteriaRolledCountsTest() throws ApiException {
        Long conceptId = null;
        String domain = null;
        CriteriaParentResponse response = api.getCriteriaRolledCounts(conceptId, domain);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets the domain filters and survey modules with the count of all concepts and questions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDomainTotalsTest() throws ApiException {
        String searchWord = null;
        Integer testFilter = null;
        Integer orderFilter = null;
        DomainInfosAndSurveyModulesResponse response = api.getDomainTotals(searchWord, testFilter, orderFilter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets analysis results of fitbit
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFitbitAnalysisResultsTest() throws ApiException {
        List<String> conceptNames = null;
        ConceptAnalysisListResponse response = api.getFitbitAnalysisResults(conceptNames);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets results for an analysis id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGenderAnalysisTest() throws ApiException {
        Analysis response = api.getGenderAnalysis();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets results for an analysis id and stratum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParticipantCountTest() throws ApiException {
        AchillesResult response = api.getParticipantCount();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get children of the given concept
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSourceConceptsTest() throws ApiException {
        Long conceptId = null;
        Integer minCount = null;
        ConceptListResponse response = api.getSourceConcepts(conceptId, minCount);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get survey sub questions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubQuestionsTest() throws ApiException {
        Long surveyConceptId = null;
        Long questionConceptId = null;
        Long answerConceptId = null;
        Integer level = null;
        SurveyQuestionFetchResponse response = api.getSubQuestions(surveyConceptId, questionConceptId, answerConceptId, level);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets participant count of question by each stratum
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSurveyQuestionCountsTest() throws ApiException {
        String questionConceptId = null;
        String questionPath = null;
        AnalysisListResponse response = api.getSurveyQuestionCounts(questionConceptId, questionPath);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Survey Question Results
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSurveyQuestionResultsTest() throws ApiException {
        Long surveyConceptId = null;
        Long questionConceptId = null;
        String questionPath = null;
        AnalysisListResponse response = api.getSurveyQuestionResults(surveyConceptId, questionConceptId, questionPath);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get survey questions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSurveyQuestionsTest() throws ApiException {
        Long surveyConceptId = null;
        String searchWord = null;
        SurveyQuestionFetchResponse response = api.getSurveyQuestions(surveyConceptId, searchWord);
    }
    
    /**
     * 
     *
     * Get Survey Version Counts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSurveyVersionCountsTest() throws ApiException {
        Long surveyConceptId = null;
        SurveyVersionCountResponse response = api.getSurveyVersionCounts(surveyConceptId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets list of matched concepts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchConceptsTest() throws ApiException {
        SearchConceptsRequest request = null;
        ConceptListResponse response = api.searchConcepts(request);

        // TODO: test validations
    }
    
}
