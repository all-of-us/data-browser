import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.codegen.DefaultGenerator
import org.gradle.api.tasks.JavaExec

buildscript {
    // External properties on the default project. Values declared in ext blocks
    // outside of the buildscsript block aren't usable here.
    ext {
        GAE_VERSION = '1.9.64'
        GOOGLE_TRUTH_VERSION = '1.1.3'
        GSON_VERSION = '2.9.0'
        HIBERNATE_VERSION = '5.6.9.Final'
        SPRING_BOOT_VERSION = '2.7.1'
        SPRING_FRAMEWORK_VERSION = '5.3.21'
        JACKSON_DATABIND_VERSION = '2.13.3'
        JACKSON_VERSION = '2.13.3'
        SPRING_DEPENDENCY_MANAGEMENT_VERSION = '1.0.13.RELEASE'
        OKHTTP_VERSION = '2.7.5'
        SPRINGFOX_VERSION = '3.0.0'
        LIQUIBASE_VERSION = '4.12.0'
        SPRING_FRAMEWORK_VERSION = '5.3.21'
        JODA_VERSION = '2.10'
        SPRING_SECURITY_VERSION = '4.2.18.RELEASE'
        MAPSTRUCT_VERSION = '1.3.1.Final'
    }

    repositories {
        // Bintray's repository - a fast Maven Central mirror & more
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    // Buildscript-specific dependencies (uses buildscript-scoped repositories). This
    // closure ensures allows the buildscript dependencies (e.g. for plgins) to be managed
    // independently from the main project's application code's dependencies
    dependencies {
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.23.0'
        classpath 'com.google.cloud.tools:appengine-gradle-plugin:2.4.1'
        classpath 'gradle.plugin.org.hidetake:gradle-swagger-generator-plugin:2.18.2'
        // Note: if you plan to upgrade the version of swagger-codegen beyond 2.2.3, be aware of two
        // implicit dependencies: (1) the set of "generatedCompile" Gradle dependencies need to be updated
        // to match the modules imported by the Swagger codegen templates, and (2) some template files
        // are overridden with forked templates within this repo; they will likely need to be re-copied from
        // the newer release version and have AoU-specific modifications re-applied.
        classpath 'net.ltgt.gradle:gradle-apt-plugin:0.21'
        classpath 'io.swagger:swagger-codegen:2.2.3'
        classpath 'org.owasp:dependency-check-gradle:6.0.1'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$project.ext.SPRING_BOOT_VERSION"
        classpath "io.spring.gradle:dependency-management-plugin:$project.ext.SPRING_DEPENDENCY_MANAGEMENT_VERSION"
    }
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'com.google.cloud.tools.appengine-appyaml'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'net.ltgt.apt-idea'
apply plugin: 'org.hidetake.swagger.generator'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'org.springframework.boot'

def swaggerTemplateDir = 'src/main/resources'
def swaggerSourceFile = 'src/main/resources/public-api.yaml'
def swaggerTargetFolder = 'src/generated/java'

def db_host = System.getenv("DB_HOST")
def db_port = System.getenv("DB_PORT")
def meta_db_user = System.getenv("META_DB_USER")
def meta_db_password = System.getenv("META_DB_PASSWORD")

def dbProperties = [
        'spring.datasource.driver-class-name': 'com.mysql.cj.jdbc.Driver',
        // Our database isn't configured to allow outside connections (which is good), so our connections
        // are either local or through the proxy, which encrypts all traffic.
        'spring.datasource.url': "jdbc:mysql://${db_host}:${db_port}/databrowser?useSSL=false",
        'spring.datasource.username': '${meta_db_user}',
        'spring.datasource.password': '${meta_db_password}'
]

task generateApi {
    group 'swagger-codegen'
    description 'Generates the Spring controllers and API model classes in Java.'
    dependsOn tasks.validateSwagger
    inputs.file("$projectDir/$swaggerSourceFile")
    outputs.dir("$projectDir/$swaggerTargetFolder")
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec("file:///$projectDir/$swaggerSourceFile")
        config.setOutputDir("$projectDir")
        config.setTemplateDir("$projectDir/$swaggerTemplateDir")
        config.setLang('spring')
        config.setAdditionalProperties([
                'apiPackage'     : 'org.pmiops.workbench.publicapi',
                'modelPackage'   : 'org.pmiops.workbench.model',
                'sourceFolder'   : swaggerTargetFolder,
                'useTags'        : 'true',
                // Generates delegate interfaces; used to make method annotations work without
                // having to copy them to our implementations.
                'delegatePattern': 'true'
        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}

task generateApiClient {
    inputs.file("$projectDir/$swaggerSourceFile")
    outputs.dir("$projectDir/$swaggerTargetFolder")
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec("file:///$projectDir/$swaggerSourceFile")
        config.setOutputDir("$projectDir")
        config.setTemplateDir("$projectDir/$swaggerTemplateDir")
        config.setLang('java')
        config.setAdditionalProperties([
                'invokerPackage'   : 'org.pmiops.workbench.publicapi.client',
                'modelPackage'   : 'org.pmiops.workbench.publicapi.client.model',
                'apiPackage'   : 'org.pmiops.workbench.publicapi.client.api',
                'sourceFolder'   : swaggerTargetFolder,
                'sourceFolder'     : swaggerTargetFolder,
                'library'          : 'okhttp-gson',
                'serializableModel': 'true',
                'dateLibrary'      : 'java8'
        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}


def workbenchApiFile = 'src/main/resources/private-workbench.yaml'

task generateWorkbenchClient {
    inputs.file("$projectDir/$workbenchApiFile")
    outputs.dir("$projectDir/$swaggerTargetFolder")
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec("file:///$projectDir/$workbenchApiFile")
        config.setOutputDir("$projectDir")
        config.setTemplateDir("$projectDir/$swaggerTemplateDir")
        config.setLang('java')
        config.setAdditionalProperties([
                'invokerPackage'   : 'org.pmiops.workbench.privateworkbench',
                'modelPackage'     : 'org.pmiops.workbench.privateworkbench.model',
                'apiPackage'       : 'org.pmiops.workbench.privateworkbench.api',
                'sourceFolder'     : swaggerTargetFolder,
                'library'          : 'okhttp-gson',
                'serializableModel': 'true',
                'dateLibrary'      : 'java8'
        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}

task generate_appengine_yaml(type: Exec) {
    executable "ruby"
    args "libproject/generate_appengine_yaml.rb"
}

configurations {
    integrationCompile.extendsFrom testCompile
    integrationRuntime.extendsFrom testRuntime
    generatedCompile
    all {
        exclude group: 'com.google.guava', module:'guava-jdk5'
    }
    __tools__Implementation.extendsFrom implementation
    __tools__RuntimeOnly.extendsFrom runtimeOnly
}

classes.dependsOn 'generatedClasses'

def swaggerCodegenTasks = ['generateApi', 'generateApiClient', 'generateWorkbenchClient']

project.tasks.ideaModule.dependsOn(swaggerCodegenTasks)
project.tasks.compileGeneratedJava.dependsOn(swaggerCodegenTasks)

project.tasks.bootJar.dependsOn(['compileGeneratedJava', 'generate_appengine_yaml'])

tasks.compileJava {
    dependsOn 'compileGeneratedJava'
    options.compilerArgs << '-Xlint:unchecked'
}

ext['hibernate.version'] = '5.6.9.Final'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'com.google.cloud.tools.appengine-standard'  // App Engine tasks
apply plugin: 'org.springframework.boot'
apply plugin: 'org.hidetake.swagger.generator'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'net.ltgt.apt-idea'
apply plugin: 'io.spring.dependency-management'

sourceSets {
    generated {
        compileClasspath = configurations.generatedCompile
    }
    main {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
    test {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
    integration {
        java {
            compileClasspath += main.output + test.output + generated.output
            runtimeClasspath += main.output + test.output + generated.output
            srcDir file('src/integration/java')
        }
    }
    tools {
        compileClasspath += main.output + generated.output
        runtimeClasspath += main.output + generated.output

        resources {
            srcDir "tools/src/main/resources"
        }
        java {
            srcDirs = ['tools/src/main/java', 'src/main/java', 'src/generated/java']
            includes = ['org/pmiops/workbench/tools/**/*.java',
                        'org/pmiops/workbench/db/**/*.java',
                        // In general, command-line tools won't need access to
                        // org.pmiops.workbench.model (Swagger-generated classes),
                        // so we selectively whitelist as needed.
                        'org/pmiops/workbench/config/CdrBigQuerySchemaConfig.java',
                        'org/pmiops/workbench/config/WorkbenchConfig.java',
                        'org/pmiops/workbench/model/Authority.java',
                        'org/pmiops/workbench/model/BlockscoreVerificationStatus.java',
                        'org/pmiops/workbench/model/BillingProjectStatus.java',
                        'org/pmiops/workbench/model/ContactEmailTakenResponse.java',
                        'org/pmiops/workbench/model/DataAccessLevel.java',
                        'org/pmiops/workbench/model/EmailVerificationStatus.java',
                        'org/pmiops/workbench/model/ErrorCode.java',
                        'org/pmiops/workbench/model/ErrorResponse.java',
                        'org/pmiops/workbench/model/WorkspaceAccessLevel.java',
                        'org/pmiops/workbench/model/CohortStatus.java',
                        'org/pmiops/workbench/model/CohortReview.java',
                        'org/pmiops/workbench/model/Domain.java',
                        'org/pmiops/workbench/model/PageVisit.java',
                        'org/pmiops/workbench/model/ParticipantCohortStatus.java',
                        'org/pmiops/workbench/model/ReviewStatus.java',
                        'org/pmiops/workbench/model/UnderservedPopulationEnum.java',
                        'org/pmiops/workbench/model/AnnotationType.java']
            excludes = ['org/pmiops/workbench/db/dao/ConceptSetService.java',
                        'org/pmiops/workbench/db/dao/UserService.java',
                        'org/pmiops/workbench/db/dao/WorkspaceService.java',
                        'org/pmiops/workbench/db/dao/WorkspaceServiceImpl.java',
                        'org/pmiops/workbench/db/dao/ParticipantCohortStatusDao.java',
                        'org/pmiops/workbench/db/dao/ParticipantCohortStatusDaoImpl.java',
                        'org/pmiops/workbench/db/dao/UserRecentResourceServiceImpl.java',
                        'org/pmiops/workbench/cohortreview/util/*.java',
                        'org/pmiops/workbench/model/Filter.java',
                        'org/pmiops/workbench/model/Operator.java',
                        'org/pmiops/workbench/model/ParticipantCohortStatusColumns.java',
                        'org/pmiops/workbench/model/SortOrder.java',
                        'org/pmiops/workbench/db/dao/CohortService.java',
                        'org/pmiops/workbench/db/dao/ParticipantCohortStatusDaoCustom.java']
        }
    }
}

generateApi.dependsOn validateSwagger
ideaModule.dependsOn generateApi
compileGeneratedJava.dependsOn generateApi
ideaModule.dependsOn generateApiClient
compileGeneratedJava.dependsOn generateApiClient
ideaModule.dependsOn generateWorkbenchClient
compileGeneratedJava.dependsOn generateWorkbenchClient
classes.dependsOn generatedClasses
compileJava.dependsOn compileGeneratedJava

war.dependsOn generate_local_appengine_web_xml

// Run this via ./project.rb update-cloud-config or (locally) docker-compose run update-config,
// which is automatically run during api/project.rb dev-up.
task loadConfig(type: JavaExec) {
    classpath sourceSets.tools.runtimeClasspath
    main = "org.pmiops.workbench.tools.ConfigLoader"
    systemProperties = dbProperties
    if (project.hasProperty("config_key") && project.hasProperty("config_file")) {
        args config_key, config_file
    }
}

// This task is called from:
// - docker-compose.yaml#update-cdr-versions
// - devstart.rb > update_cdr_versions_for_project (called by run-local-migrations)
task updateCdrVersions(type: JavaExec) {
    classpath sourceSets.tools.runtimeClasspath
    main = "org.pmiops.workbench.tools.UpdateCdrVersions"
    systemProperties = dbProperties
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

task integration(type: Test) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    systemProperties = [
            'DB_API_BASE_PATH': System.getenv('DB_API_BASE_PATH')
    ]
    // Option to control size of stack trace:
    // jvmArgs '-XX:MaxJavaStackTraceDepth=10'
}

integration {
    // These tests should always run when requested as they are not hermetic.
    outputs.upToDateWhen { false }
}


clean.doFirst {
    delete("${projectDir}/$swaggerTargetFolder")
}

repositories {   // repositories for Jar's you access in your code
    jcenter()
    mavenCentral()
}

ext {
    mapstructVersion = '1.3.1.Final'
}

dependencies {
    annotationProcessor "org.mapstruct:mapstruct-processor:$project.ext.MAPSTRUCT_VERSION"

    compile "com.fasterxml.jackson.core:jackson-annotations:$project.ext.JACKSON_VERSION"
    compile "com.fasterxml.jackson.core:jackson-core:$project.ext.JACKSON_VERSION"
    compile "com.fasterxml.jackson.core:jackson-databind:$project.ext.JACKSON_DATABIND_VERSION"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$project.ext.JACKSON_VERSION"

    compile "org.yaml:snakeyaml:1.32"

    compile "com.google.api-client:google-api-client-appengine:1.30.0"

    compile "com.google.appengine:appengine-api-1.0-sdk:$project.ext.GAE_VERSION"
    compile "com.google.appengine:appengine:$project.ext.GAE_VERSION"

    compile "com.google.auth:google-auth-library-appengine:0.19.0"
    compile "com.google.auth:google-auth-library-oauth2-http:0.19.0"

    compile "com.google.cloud.sql:mysql-socket-factory:1.6.1"
    compile "com.google.cloud:google-cloud-bigquery:1.122.2"
    compile "com.google.cloud:google-cloud-iamcredentials:0.44.1"
    compile "com.google.cloud:google-cloud-logging:1.102.0"
    compile "com.google.cloud:google-cloud-monitoring:1.100.1"
    compile "com.google.cloud:google-cloud-storage:1.113.1"
    compile "com.google.cloud:google-cloud-tasks:1.30.4"

    compile "com.google.code.gson:gson:$project.ext.GSON_VERSION"
    compile "com.google.guava:guava:30.0-jre"

    compile "com.google.http-client:google-http-client-apache:2.0.0"
    compile "com.google.oauth-client:google-oauth-client-jetty:1.30.6"

    compile "com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20180219.1"
    compile "com.opsgenie.integration:sdk:2+"

    compile "com.squareup.okhttp:logging-interceptor:$project.ext.OKHTTP_VERSION"
    compile "com.squareup.okhttp:okhttp:$project.ext.OKHTTP_VERSION"

    compile "io.swagger:swagger-annotations:1.5.16"
    compile "javax.inject:javax.inject:1"

    compile "joda-time:joda-time:$project.ext.JODA_VERSION"

    compile "org.liquibase:liquibase-core:3.10.0"
    compile "mysql:mysql-connector-java:8.0.28"

    compile "org.apache.commons:commons-collections4:4.4"
    compile "org.apache.commons:commons-lang3:3.6"
    compile "org.apache.commons:commons-text:1.8"

    compile "org.apache.httpcomponents:httpclient:4.5.13"
    compile 'org.springframework.boot:spring-boot-starter-validation'
    compile "commons-codec:commons-codec:1.15"
    compile 'com.auth0:java-jwt:3.14.0'

    compile "org.hibernate:hibernate-core:$project.ext.HIBERNATE_VERSION"

    compile "org.json:json:20160810"

    compile("org.apache.tomcat:tomcat-jdbc:9.0.10")
    compile("org.springframework.boot:spring-boot-starter-tomcat")
    compile("org.springframework.boot:spring-boot-starter-jdbc") {
        exclude group: 'com.zaxxer', module: 'HikariCP'
    }

    compile("org.springframework.boot:spring-boot-starter-data-jpa") {
        exclude module: 'spring-boot-starter-tomcat'
        exclude group: 'com.zaxxer', module: 'HikariCP'
        exclude group: 'org.slf4j', module: 'jul-to-slf4j'
    }

    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'spring-boot-starter-tomcat'
        exclude group: 'org.slf4j', module: 'jul-to-slf4j'
    }

    compile "org.springframework.retry:spring-retry"
    compile 'org.springframework.security:spring-security-config:5.6.4'
    compile "org.springframework.security:spring-security-core"
    compile "org.springframework.security:spring-security-web:5.6.4"

    implementation "org.mapstruct:mapstruct:$project.ext.MAPSTRUCT_VERSION"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:$project.ext.MAPSTRUCT_VERSION"

    // Dependencies for Swagger codegen-generated sources. This should include all dependencies required by Swagger's
    // default okhttp API codegen templates (see https://github.com/swagger-api/swagger-codegen/blob/v2.2.3/samples/client/petstore/spring-stubs/pom.xml)
    // plus any custom templates included in our repo under the SWAGGER_2_TEMPLATE_DIR.
    generatedCompile "org.springframework.boot:spring-boot-starter-data-rest"


    generatedCompile "io.springfox:springfox-swagger2:$project.ext.SPRINGFOX_VERSION"
    generatedCompile "io.springfox:springfox-swagger-ui:$project.ext.SPRINGFOX_VERSION"

    generatedCompile 'org.springframework.boot:spring-boot-starter-validation'
    generatedCompile "com.squareup.okhttp:okhttp:$project.ext.OKHTTP_VERSION"
    generatedCompile "com.squareup.okhttp:logging-interceptor:$project.ext.OKHTTP_VERSION"
    generatedCompile "com.google.code.gson:gson:$project.ext.GSON_VERSION"
    generatedCompile "joda-time:joda-time:$project.ext.JODA_VERSION"
    generatedCompile "com.fasterxml.jackson.datatype:jackson-datatype-joda:$project.ext.JACKSON_VERSION"

    generatedCompile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'

    __tools__Compile 'commons-cli:commons-cli:1.4'
    __tools__Compile 'com.opencsv:opencsv:4.6'

    testCompile 'org.mockito:mockito-core:3.3.3'

    testCompile 'com.google.truth:truth:0.42'
    testCompile 'com.google.truth.extensions:truth-java8-extension:1.0.1'
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile 'com.h2database:h2:1.4.194'
    testCompile 'org.liquibase:liquibase-core:4.3.5'
    testCompile 'org.bitbucket.radistao.test:before-after-spring-test-runner:0.1.0'
}

swaggerSources {
    workbench {
        inputFile = file("$projectDir/$swaggerSourceFile")
    }
}

tasks.withType(Test) {
    testLogging {
        // Causes the correct line to be reported on an exception.
        exceptionFormat "full"
    }
    def verboseTestLogging=project.properties['verboseTestLogging'] ?: 'no'
    // To debug def verboseTestLogging='yes'
    if (verboseTestLogging == 'yes') {
        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }
    } else {
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

test {
    // Starting with a smaller minimum seems to help this task use memory more slowly.
    // Increase max heap size from default of 1024M in order to avoid OOM errors.
    // When Gradle runs out of memory, it fails with this message:
    //   Process 'Gradle Test Executor 1' finished with non-zero exit value 137
    // and literally nothing else in terms of helpful debugging information.
    minHeapSize = '128m'
    maxHeapSize = '2048m'
}

appengine {  // App Engine tasks configuration
    tools {
        cloudSdkHome = "/google-cloud-sdk"
    }
    // dmohs: You may see this message [1], but don't implement the suggested fix because it breaks
    // Spring.
    // [1] https://github.com/GoogleCloudPlatform/app-gradle-plugin/issues/100
    // stage {
    //    enableJarClasses = true
    // }

    deploy {   // deploy configuration
        stopPreviousVersion = true  // default - stop the current version
        promote = true              // default - & make this the current version
        // TODO(danrodney)
        //account = System.properties("account")
        //project = System.properties("project")
    }
}

bootRun {
    environment = [
            'GOOGLE_APPLICATION_CREDENTIALS': file("$rootDir/sa-key.json").getAbsolutePath()
    ]
}

group = 'org.pmiops.allofus.workbench'
version = '0.1.0'          // Version in generated output

sourceCompatibility = 11
targetCompatibility = 11