import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.codegen.DefaultGenerator
import org.gradle.api.tasks.JavaExec

buildscript {    // Configuration for building

    ext {
        GAE_VERSION = '1.9.64'
        GOOGLE_TRUTH_VERSION = '1.1.3'
        GSON_VERSION = '2.9.0'
        HIBERNATE_VERSION = '5.6.9.Final'
        SPRING_BOOT_VERSION = '2.7.1'
        SPRING_FRAMEWORK_VERSION = '5.3.21'
        JACKSON_DATABIND_VERSION = '2.14.1'
        JACKSON_VERSION = '2.14.1'
        SPRING_DEPENDENCY_MANAGEMENT_VERSION = '1.0.13.RELEASE'
        OKHTTP_VERSION = '2.7.5'
        SPRINGFOX_VERSION = '3.0.0'
        LIQUIBASE_VERSION = '4.12.0'
        SPRING_FRAMEWORK_VERSION = '5.3.21'
    }

    repositories {
        jcenter()    // Bintray's repository - a fast Maven Central mirror & more
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${SPRING_BOOT_VERSION}"
        classpath 'com.google.cloud.tools:appengine-gradle-plugin:2.4.2'
        classpath 'gradle.plugin.org.hidetake:gradle-swagger-generator-plugin:2.12.0'
        classpath 'io.swagger:swagger-codegen:2.2.3'
        classpath 'org.owasp:dependency-check-gradle:7.4.4'
        classpath "io.spring.gradle:dependency-management-plugin:${SPRING_DEPENDENCY_MANAGEMENT_VERSION}"
        classpath "com.google.http-client:google-http-client:1.41.1"
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'java'
    id 'war'

    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.diffplug.spotless' version '5.12.5'
    id 'com.google.cloud.tools.appengine-appenginewebxml' version '2.4.5'
    id 'org.jetbrains.kotlin.jvm' version '1.8.20' // KOTLIN_VERSION
    // Note: if you plan to upgrade the version of swagger-codegen beyond 2.2.3, be aware of two
    // implicit dependencies: (1) the set of "generatedCompile" Gradle dependencies need to be updated
    // to match the modules imported by the Swagger codegen templates, and (2) some template files
    // are overridden with forked templates within this repo; they will likely need to be re-copied from
    // the newer release version and have AoU-specific modifications re-applied.
    id 'org.hidetake.swagger.generator' version '2.19.2'
    id 'org.owasp.dependencycheck' version '7.4.4'
    id 'org.springframework.boot' version '2.7.4'
}

def swaggerTemplateDir = 'src/main/resources'
def swaggerSourceFile = 'src/main/resources/public-api.yaml'
def swaggerTargetFolder = 'src/generated/java'

def db_host = System.getenv("DB_HOST")
def db_port = System.getenv("DB_PORT")
def databrowser_db_user = System.getenv("DATABROWSER_DB_USER")
def databrowser_db_password = System.getenv("DATABROWSER_DB_PASSWORD")
def project_name = System.getenv("PROJECT")

def dbProperties = [
        'spring.datasource.driver-class-name': 'com.mysql.cj.jdbc.Driver',
        // Our database isn't configured to allow outside connections (which is good), so our connections
        // are either local or through the proxy, which encrypts all traffic.
        'spring.datasource.url': "jdbc:mysql://${db_host}:${db_port}/databrowser?useSSL=false",
        'spring.datasource.username': '${databrowser_db_user}',
        'spring.datasource.password': '${databrowser_db_password}'
]

if (JavaVersion.current() != JavaVersion.VERSION_11) {
    throw new GradleException("This build must be run with Java 11. See developer-system-initialization.md")
}

task generateApi {
    inputs.file("$projectDir/$swaggerSourceFile")
    outputs.dir("$projectDir/$swaggerTargetFolder")
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec("file:///$projectDir/$swaggerSourceFile")
        config.setOutputDir("$projectDir")
        config.setTemplateDir("$projectDir/$swaggerTemplateDir")
        config.setLang('spring')
        config.setAdditionalProperties([
                'apiPackage'     : 'org.pmiops.workbench.publicapi',
                'modelPackage'   : 'org.pmiops.workbench.model',
                'sourceFolder'   : swaggerTargetFolder,
                'useTags'        : 'true',
                // Generates delegate interfaces; used to make method annotations work without
                // having to copy them to our implementations.
                'delegatePattern': 'true'
        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}

task generateApiClient {
    inputs.file("$projectDir/$swaggerSourceFile")
    outputs.dir("$projectDir/$swaggerTargetFolder")
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec("file:///$projectDir/$swaggerSourceFile")
        config.setOutputDir("$projectDir")
        config.setTemplateDir("$projectDir/$swaggerTemplateDir")
        config.setLang('java')
        config.setAdditionalProperties([
                'invokerPackage'   : 'org.pmiops.workbench.publicapi.client',
                'modelPackage'   : 'org.pmiops.workbench.publicapi.client.model',
                'apiPackage'   : 'org.pmiops.workbench.publicapi.client.api',
                'sourceFolder'   : swaggerTargetFolder,
                'sourceFolder'     : swaggerTargetFolder,
                'library'          : 'okhttp-gson',
                'serializableModel': 'true',
                'dateLibrary'      : 'java8'
        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}


def workbenchApiFile = 'src/main/resources/private-workbench.yaml'

task generateWorkbenchClient {
    inputs.file("$projectDir/$workbenchApiFile")
    outputs.dir("$projectDir/$swaggerTargetFolder")
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec("file:///$projectDir/$workbenchApiFile")
        config.setOutputDir("$projectDir")
        config.setTemplateDir("$projectDir/$swaggerTemplateDir")
        config.setLang('java')
        config.setAdditionalProperties([
                'invokerPackage'   : 'org.pmiops.workbench.privateworkbench',
                'modelPackage'     : 'org.pmiops.workbench.privateworkbench.model',
                'apiPackage'       : 'org.pmiops.workbench.privateworkbench.api',
                'sourceFolder'     : swaggerTargetFolder,
                'library'          : 'okhttp-gson',
                'serializableModel': 'true',
                'dateLibrary'      : 'java8'
        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}

task generate_local_appengine_web_xml(type: Exec) {
    executable "ruby"
    args "libproject/generate_appengine_web_xml.rb"
}

configurations {
    __integration__Compile.extendsFrom testImplementation
    __integration__Runtime.extendsFrom testRuntime
    generatedCompile
    all {
        exclude group: 'com.google.guava', module:'guava-jdk5'
    }
    toolsImplementation.extendsFrom implementation
    toolsRuntimeOnly.extendsFrom runtimeOnly
}

sourceSets {
    generated {
        compileClasspath = configurations.generatedCompile
    }
    main {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
    test {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
    __integration__ {
        java {
            compileClasspath += main.output + test.output + generated.output
            runtimeClasspath += main.output + test.output + generated.output
            srcDir file('src/integration/java')
        }
    }
    tools {
        compileClasspath += main.output + generated.output
        runtimeClasspath += main.output + generated.output

        resources {
            srcDir "tools/src/main/resources"
        }
        java {
            srcDirs = ['tools/src/main/java', 'src/main/java', 'src/generated/java']
            includes = ['org/pmiops/workbench/tools/**/*.java',
                        'org/pmiops/workbench/db/**/*.java',
                        // In general, command-line tools won't need access to
                        // org.pmiops.workbench.model (Swagger-generated classes),
                        // so we selectively whitelist as needed.
                        'org/pmiops/workbench/config/CdrBigQuerySchemaConfig.java',
                        'org/pmiops/workbench/config/WorkbenchConfig.java',
                        'org/pmiops/workbench/model/Authority.java',
                        'org/pmiops/workbench/model/BlockscoreVerificationStatus.java',
                        'org/pmiops/workbench/model/BillingProjectStatus.java',
                        'org/pmiops/workbench/model/ContactEmailTakenResponse.java',
                        'org/pmiops/workbench/model/DataAccessLevel.java',
                        'org/pmiops/workbench/model/EmailVerificationStatus.java',
                        'org/pmiops/workbench/model/ErrorCode.java',
                        'org/pmiops/workbench/model/ErrorResponse.java',
                        'org/pmiops/workbench/model/WorkspaceAccessLevel.java',
                        'org/pmiops/workbench/model/CohortStatus.java',
                        'org/pmiops/workbench/model/CohortReview.java',
                        'org/pmiops/workbench/model/Domain.java',
                        'org/pmiops/workbench/model/PageVisit.java',
                        'org/pmiops/workbench/model/ParticipantCohortStatus.java',
                        'org/pmiops/workbench/model/ReviewStatus.java',
                        'org/pmiops/workbench/model/UnderservedPopulationEnum.java',
                        'org/pmiops/workbench/model/AnnotationType.java']
            excludes = ['org/pmiops/workbench/db/dao/ConceptSetService.java',
                        'org/pmiops/workbench/db/dao/UserService.java',
                        'org/pmiops/workbench/db/dao/WorkspaceService.java',
                        'org/pmiops/workbench/db/dao/WorkspaceServiceImpl.java',
                        'org/pmiops/workbench/db/dao/ParticipantCohortStatusDao.java',
                        'org/pmiops/workbench/db/dao/ParticipantCohortStatusDaoImpl.java',
                        'org/pmiops/workbench/db/dao/UserRecentResourceServiceImpl.java',
                        'org/pmiops/workbench/cohortreview/util/*.java',
                        'org/pmiops/workbench/model/Filter.java',
                        'org/pmiops/workbench/model/Operator.java',
                        'org/pmiops/workbench/model/ParticipantCohortStatusColumns.java',
                        'org/pmiops/workbench/model/SortOrder.java',
                        'org/pmiops/workbench/db/dao/CohortService.java',
                        'org/pmiops/workbench/db/dao/ParticipantCohortStatusDaoCustom.java']
        }
    }
}

generateApi.dependsOn validateSwagger
ideaModule.dependsOn generateApi
project.tasks.compileGeneratedJava.dependsOn generateApi
ideaModule.dependsOn generateApiClient
project.tasks.compileGeneratedJava.dependsOn generateApiClient
ideaModule.dependsOn generateWorkbenchClient
project.tasks.compileGeneratedJava.dependsOn generateWorkbenchClient
classes.dependsOn generatedClasses
compileJava.dependsOn compileGeneratedJava

war.dependsOn compileGeneratedJava
war.dependsOn generate_local_appengine_web_xml


// Run this via ./project.rb update-cloud-config or (locally) docker-compose run update-config,
// which is automatically run during api/project.rb dev-up.
task loadConfig(type: JavaExec) {
    classpath sourceSets.tools.runtimeClasspath
    main = "org.pmiops.workbench.tools.ConfigLoader"
    systemProperties = dbProperties
    if (project.hasProperty("config_key") && project.hasProperty("config_file")) {
        args config_key, config_file
    }
}

// This task is called from:
// - docker-compose.yaml#update-cdr-versions
// - devstart.rb > update_cdr_versions_for_project (called by run-local-migrations)
task updateCdrConfig(type: JavaExec) {
    classpath sourceSets.tools.runtimeClasspath
    main = "org.pmiops.workbench.tools.UpdateCdrVersions"
    systemProperties = dbProperties
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

task integrationTest(type: Test) {
    doLast {
        println "Integration Test Classpath: ${sourceSets.integrationTest.runtimeClasspath.files}"
    }
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Run integration test suite.'
    testClassesDirs = sourceSets.__integration__.output.classesDirs
    classpath = sourceSets.__integration__.runtimeClasspath
    // These tests should always run when requested since they consume and produce side-effects.
    outputs.upToDateWhen { false }

    useJUnitPlatform()

    // Option to control size of stack trace:
    // jvmArgs '-XX:MaxJavaStackTraceDepth=10'
}

clean.doFirst {
    delete("${projectDir}/$swaggerTargetFolder")
}

repositories {   // repositories for Jar's you access in your code
    jcenter()
    mavenCentral()
}

ext {
    mapstructVersion = '1.3.1.Final'
}

dependencies {
    // To show the dependency tree, try: ./project.rb gradle dependencies --configuration compile
    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.1.0'
    implementation 'mysql:mysql-connector-java:8.0.30'

    // TODO: consider switching google deps to the BOM.  https://cloud.google.com/java/docs/bom

    implementation 'com.google.http-client:google-http-client:1.41.1'
    implementation 'com.google.api-client:google-api-client:2.2.0'
    implementation 'com.google.api-client:google-api-client-appengine:1.35.2'
    implementation 'com.google.apis:google-api-services-admin-directory:directory_v1-rev20220919-2.0.0'
    implementation 'com.google.apis:google-api-services-cloudbilling:v1-rev20220908-2.0.0'
    implementation 'com.google.apis:google-api-services-cloudresourcemanager:v3-rev20220925-2.0.0'
    implementation 'com.google.apis:google-api-services-iam:v1-rev20220825-2.0.0'
    implementation 'com.google.api-client:google-api-client-appengine:2.2.0'
    implementation 'com.google.auth:google-auth-library-appengine:1.11.0'
    implementation 'com.google.auth:google-auth-library-oauth2-http:1.11.0'
    implementation 'com.google.cloud.sql:mysql-socket-factory:1.7.0'
    implementation 'com.google.cloud:google-cloud-bigquery:2.25.0'
    implementation 'com.google.cloud:google-cloud-iamcredentials:2.3.6'
    implementation 'com.google.cloud:google-cloud-logging:3.11.5'
    implementation 'com.google.cloud:google-cloud-monitoring:3.4.6'
    implementation 'com.google.cloud:google-cloud-storage:2.13.0'
    implementation 'com.google.cloud:google-cloud-tasks:2.3.11'
    implementation "com.google.code.gson:gson:${GSON_VERSION}"
    implementation 'com.google.guava:guava:32.0.1-jre'
    implementation 'com.google.protobuf:protobuf-java:3.21.7'
    implementation 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20211018.2'
    // https://mvnrepository.com/artifact/com.google.appengine/appengine-api-1.0-sdk
    implementation 'com.google.appengine:appengine-api-1.0-sdk:2.0.24'


    // https://mvnrepository.com/artifact/org.springframework.security/spring-security-config
    implementation group: 'org.springframework.security', name: 'spring-security-config', version: '5.6.4'

    implementation 'ch.qos.logback:logback-classic:1.2.11'

    implementation "org.yaml:snakeyaml:1.32"
    implementation 'commons-io:commons-io:2.7'
    implementation 'com.github.fge:json-patch:1.9'
    implementation "org.hibernate:hibernate-validator:6.0.18.Final"

    implementation("org.springframework.boot:spring-boot-starter-web:${SPRING_BOOT_VERSION}") {
        exclude module: 'spring-boot-starter-tomcat'
        exclude group: 'org.slf4j', module: 'jul-to-slf4j'
    }
    implementation("org.springframework.boot:spring-boot-starter-data-jpa:${SPRING_BOOT_VERSION}") {
        exclude module: 'spring-boot-starter-tomcat'
        exclude group: 'org.slf4j', module: 'jul-to-slf4j'
    }

    implementation 'org.springframework:spring-context:5.3.19'

    implementation("org.springframework.boot:spring-boot-starter-actuator:${SPRING_BOOT_VERSION}") {
        exclude module: 'spring-boot-starter-tomcat'
        exclude group: 'org.slf4j', module: 'jul-to-slf4j'
    }
    implementation 'org.springframework.security:spring-security-web:5.6.9'
    implementation "org.hibernate:hibernate-core:${HIBERNATE_VERSION}"

    implementation "org.springframework:spring-beans:${SPRING_FRAMEWORK_VERSION}"

    implementation "com.fasterxml.jackson.core:jackson-annotations:${JACKSON_VERSION}"
    implementation "com.fasterxml.jackson.core:jackson-core:${JACKSON_VERSION}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${JACKSON_DATABIND_VERSION}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${JACKSON_VERSION}"
    implementation "com.squareup.okhttp:okhttp:${OKHTTP_VERSION}"
    implementation "com.squareup.okhttp:logging-interceptor:${OKHTTP_VERSION}"
    implementation 'javax.inject:javax.inject:1'
    implementation 'io.swagger:swagger-annotations:1.5.16'
    implementation 'org.apache.commons:commons-lang3:3.0'


    implementation "org.apache.tomcat:tomcat-jdbc:10.0.23"

    implementation 'joda-time:joda-time:2.10'


    implementation 'io.netty:netty-common:4.1.77.Final'

    implementation "org.mapstruct:mapstruct:${mapstructVersion}"

    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    implementation 'com.auth0:java-jwt:3.19.2'


    // https://github.com/GoogleCloudPlatform/google-cloud-java/issues/1502
    implementation 'org.json:json:20180130'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.mockito:mockito-core:3.11.2'

    testImplementation 'com.google.http-client:google-http-client:1.41.1'
    testImplementation 'com.google.api-client:google-api-client:2.2.0'

    testImplementation "com.google.truth:truth:${GOOGLE_TRUTH_VERSION}"
    testImplementation "com.google.truth.extensions:truth-java8-extension:${GOOGLE_TRUTH_VERSION}"

    testImplementation("org.springframework.boot:spring-boot-starter-test:${SPRING_BOOT_VERSION}") {
        exclude group: 'org.junit', module: 'junit'
        exclude group: 'org.mockito', module: 'mockito-core'
        exclude group: 'org.mockito', module: 'mockito-all'
    }

    testImplementation "org.springframework.boot:spring-boot-starter-test:${SPRING_BOOT_VERSION}"
    testImplementation 'com.h2database:h2:1.4.194'
    testImplementation 'org.liquibase:liquibase-core:3.5.3'
    testImplementation 'org.bitbucket.radistao.test:before-after-spring-test-runner:0.1.0'

    // For Swagger generation. These should include dependencies found in the Swagger codegen
    // example here:
    // https://github.com/swagger-api/swagger-codegen/blob/v2.2.3/samples/client/petstore/spring-stubs/pom.xml
    generatedCompile "org.springframework.boot:spring-boot-starter-data-rest:${SPRING_BOOT_VERSION}"
    generatedCompile "org.springframework.boot:spring-boot-starter-validation:${SPRING_BOOT_VERSION}"
    generatedCompile 'io.springfox:springfox-swagger2:3.0.0'
    generatedCompile 'io.springfox:springfox-swagger-ui:3.0.0'
    generatedCompile "com.squareup.okhttp:okhttp:${OKHTTP_VERSION}"
    generatedCompile "com.squareup.okhttp:logging-interceptor:${OKHTTP_VERSION}"
    generatedCompile "com.google.code.gson:gson:${GSON_VERSION}"
    generatedCompile 'joda-time:joda-time:2.10'
    generatedCompile "com.fasterxml.jackson.datatype:jackson-datatype-joda:${JACKSON_VERSION}"
    generatedCompile "javax.xml.bind:jaxb-api:2.3.1"

    generatedCompile 'com.google.http-client:google-http-client:1.41.1'
    generatedCompile 'com.google.api-client:google-api-client:2.2.0'
}

swaggerSources {
    workbench {
        inputFile = file("$projectDir/$swaggerSourceFile")
    }
}

tasks.compileJava {
    dependsOn 'compileGeneratedJava'
    options.compilerArgs << '-Xlint:unchecked'
}

tasks.withType(Test) {
    testLogging {
        // Causes the correct line to be reported on an exception.
        exceptionFormat "full"
    }
    def verboseTestLogging=project.properties['verboseTestLogging'] ?: 'no'
    // To debug def verboseTestLogging='yes'
    if (verboseTestLogging == 'yes') {
        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }
    } else {
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

test {
    // Starting with a smaller minimum seems to help this task use memory more slowly.
    // Increase max heap size from default of 1024M in order to avoid OOM errors.
    // When Gradle runs out of memory, it fails with this message:
    //   Process 'Gradle Test Executor 1' finished with non-zero exit value 137
    // and literally nothing else in terms of helpful debugging information.
    minHeapSize = '128m'
    maxHeapSize = '2048m'
}

def cloudSdkHomePath = "/google-cloud-sdk"

if (System.getenv('CIRCLECI') == 'true') {
    cloudSdkHomePath = "/home/circleci/google-cloud-sdk"
} else if (System.getenv('PROJECT').equals("stable") || System.getenv('PROJECT').equals("prod")) {
    cloudSdkHomePath = "/root/google-cloud-sdk"
} else {
    cloudSdkHomePath = "/google-cloud-sdk"
}

println "cloudsdkhome"
println cloudSdkHomePath

println "Gradle Version: " + gradle.gradleVersion

appengine {  // App Engine tasks configuration
    tools {
        cloudSdkHome = cloudSdkHomePath
    }
    run {      // local (dev_appserver) configuration (standard environments only)
        port = 8083                 // default
        host = "0.0.0.0"
        // Allows you to attach a debugger on port 8001 when running locally.
        jvmFlags = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8002']
        // Give dev_appserver 2 minutes to start up when running appengineStart; by
        // default it will fail after 1 minute. (This is particularly a problem in CircleCI.)
        startSuccessTimeout = 120

        environment = [GOOGLE_APPLICATION_CREDENTIALS: file("$rootDir/sa-key.json").getAbsolutePath()]
    }

    // dmohs: You may see this message [1], but don't implement the suggested fix because it breaks
    // Spring.
    // [1] https://github.com/GoogleCloudPlatform/app-gradle-plugin/issues/100
    // stage {
    //    enableJarClasses = true
    // }

    deploy {   // deploy configuration
        stopPreviousVersion = true  // default - stop the current version
        promote = true              // default - & make this the current version
        // TODO(danrodney)
        //account = System.properties("account")
        //project = System.properties("project")
        projectId = "aou-db-test"
    }
}

group = 'org.pmiops.allofus.workbench'
version = '0.1.0'          // Version in generated output

sourceCompatibility = 11
targetCompatibility = 11