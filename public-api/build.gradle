import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.codegen.DefaultGenerator

def swaggerTemplateDir = 'src/main/resources'
def swaggerSourceFile = 'src/main/resources/public-api.yaml'
def swaggerTargetFolder = 'src/generated/java'

task generateApi {
  inputs.file("$projectDir/$swaggerSourceFile")
  outputs.dir("$projectDir/$swaggerTargetFolder")
  doLast {
    def config = new CodegenConfigurator()
    config.setInputSpec("file:///$projectDir/$swaggerSourceFile")
    config.setOutputDir("$projectDir")
    config.setTemplateDir("$projectDir/$swaggerTemplateDir")
    config.setLang('spring')
    config.setAdditionalProperties([
            'apiPackage'     : 'org.pmiops.workbench.publicapi',
            'modelPackage'   : 'org.pmiops.workbench.model',
            'sourceFolder'   : swaggerTargetFolder,
            'useTags'        : 'true',
            // Generates delegate interfaces; used to make method annotations work without
            // having to copy them to our implementations.
            'delegatePattern': 'true'
    ])
    new DefaultGenerator().opts(config.toClientOptInput()).generate()
  }
}

task generateApiClient {
  inputs.file("$projectDir/$swaggerSourceFile")
  outputs.dir("$projectDir/$swaggerTargetFolder")
  doLast {
    def config = new CodegenConfigurator()
    config.setInputSpec("file:///$projectDir/$swaggerSourceFile")
    config.setOutputDir("$projectDir")
    config.setTemplateDir("$projectDir/$swaggerTemplateDir")
    config.setLang('java')
    config.setAdditionalProperties([
            'invokerPackage'   : 'org.pmiops.workbench.publicapi.client',
            'modelPackage'   : 'org.pmiops.workbench.publicapi.client.model',
            'apiPackage'   : 'org.pmiops.workbench.publicapi.client.api',
            'sourceFolder'   : swaggerTargetFolder,
            'sourceFolder'     : swaggerTargetFolder,
            'library'          : 'okhttp-gson',
            'serializableModel': 'true',
            'dateLibrary'      : 'java8'
    ])
    new DefaultGenerator().opts(config.toClientOptInput()).generate()
  }
}


def workbenchApiFile = 'src/main/resources/private-workbench.yaml'

task generateWorkbenchClient {
  inputs.file("$projectDir/$workbenchApiFile")
  outputs.dir("$projectDir/$swaggerTargetFolder")
  doLast {
    def config = new CodegenConfigurator()
    config.setInputSpec("file:///$projectDir/$workbenchApiFile")
    config.setOutputDir("$projectDir")
    config.setTemplateDir("$projectDir/$swaggerTemplateDir")
    config.setLang('java')
    config.setAdditionalProperties([
            'invokerPackage'   : 'org.pmiops.workbench.privateworkbench',
            'modelPackage'     : 'org.pmiops.workbench.privateworkbench.model',
            'apiPackage'       : 'org.pmiops.workbench.privateworkbench.api',
            'sourceFolder'     : swaggerTargetFolder,
            'library'          : 'okhttp-gson',
            'serializableModel': 'true',
            'dateLibrary'      : 'java8'
    ])
    new DefaultGenerator().opts(config.toClientOptInput()).generate()
  }
}

task generate_local_appengine_web_xml(type: Exec) {
  executable "bash"
  args "libproject/generate_appengine_web_xml.sh"
}

configurations {
  integrationCompile.extendsFrom testCompile
  integrationRuntime.extendsFrom testRuntime
  generatedCompile
  all {
    exclude group: 'com.google.guava', module:'guava-jdk5'
  }
}

buildscript {    // Configuration for building

  ext {
    GAE_VERSION = '1.9.64'
    SPRING_BOOT_VERSION = '2.5.13'
    JACKSON_VERSION = '2.9.10'
  }

  repositories {
    jcenter()    // Bintray's repository - a fast Maven Central mirror & more
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${SPRING_BOOT_VERSION}"
    classpath 'com.google.cloud.tools:appengine-gradle-plugin:1.3.5'
    classpath 'gradle.plugin.org.hidetake:gradle-swagger-generator-plugin:2.12.0'
    classpath 'io.swagger:swagger-codegen:2.2.3'
    classpath 'org.owasp:dependency-check-gradle:6.0.1'
    classpath 'net.ltgt.gradle:gradle-apt-plugin:0.21'
  }
}

ext['hibernate.version'] = '5.2.10.Final'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'com.google.cloud.tools.appengine-standard'  // App Engine tasks
apply plugin: 'org.springframework.boot'
apply plugin: 'org.hidetake.swagger.generator'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'net.ltgt.apt-idea'

sourceSets {
  generated {
    compileClasspath = configurations.generatedCompile
  }
  main {
    compileClasspath += generated.output
    runtimeClasspath += generated.output
  }
  test {
    compileClasspath += generated.output
    runtimeClasspath += generated.output
  }
  integration {
    java {
      compileClasspath += main.output + test.output + generated.output
      runtimeClasspath += main.output + test.output + generated.output
      srcDir file('src/integration/java')
    }
  }
}

generateApi.dependsOn validateSwagger
ideaModule.dependsOn generateApi
compileGeneratedJava.dependsOn generateApi
ideaModule.dependsOn generateApiClient
compileGeneratedJava.dependsOn generateApiClient
ideaModule.dependsOn generateWorkbenchClient
compileGeneratedJava.dependsOn generateWorkbenchClient
classes.dependsOn generatedClasses
compileJava.dependsOn compileGeneratedJava

war.dependsOn generate_local_appengine_web_xml

task integration(type: Test) {
  group = LifecycleBasePlugin.VERIFICATION_GROUP
  testClassesDirs = sourceSets.integration.output.classesDirs
  classpath = sourceSets.integration.runtimeClasspath
  systemProperties = [
      'DB_API_BASE_PATH': System.getenv('DB_API_BASE_PATH')
  ]
  // Option to control size of stack trace:
  // jvmArgs '-XX:MaxJavaStackTraceDepth=10'
}

integration {
  // These tests should always run when requested as they are not hermetic.
  outputs.upToDateWhen { false }
}


clean.doFirst {
  delete("${projectDir}/$swaggerTargetFolder")
}

repositories {   // repositories for Jar's you access in your code
  jcenter()
  mavenCentral()
}

ext {
  mapstructVersion = '1.3.1.Final'
}

dependencies {
  // To show the dependency tree, try: ./project.rb gradle dependencies --configuration compile
  providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.1.0'
  compile 'mysql:mysql-connector-java:8.0.13'

  // https://mvnrepository.com/artifact/org.springframework.security/spring-security-config
  compile group: 'org.springframework.security', name: 'spring-security-config', version: '5.5.7'
  compile 'com.google.guava:guava:26.0-jre'

  compile 'com.google.cloud.sql:mysql-socket-factory:1.0.10'
  compile "com.google.appengine:appengine:${GAE_VERSION}"
  compile "com.google.appengine:appengine-api-1.0-sdk:${GAE_VERSION}"
  compile("org.springframework.boot:spring-boot-starter-web:${SPRING_BOOT_VERSION}") {
    exclude module: 'spring-boot-starter-tomcat'
    exclude group: 'org.slf4j', module: 'jul-to-slf4j'
  }

  compile 'com.google.code.gson:gson:2.8.9'
  compile 'com.google.api-client:google-api-client:1.30.5'
  compile("org.springframework.boot:spring-boot-starter-actuator:${SPRING_BOOT_VERSION}") {
    exclude module: 'spring-boot-starter-tomcat'
    exclude group: 'org.slf4j', module: 'jul-to-slf4j'
  }
  compile 'org.springframework.security:spring-security-web:5.5.7'
  compile 'org.hibernate:hibernate-core:5.2.10.Final'

  compile "com.fasterxml.jackson.core:jackson-annotations:${JACKSON_VERSION}"
  compile "com.fasterxml.jackson.core:jackson-core:${JACKSON_VERSION}"
  compile "com.fasterxml.jackson.core:jackson-databind:${JACKSON_VERSION}"
  compile 'com.squareup.okhttp:okhttp:2.7.5'
  compile 'com.squareup.okhttp:logging-interceptor:2.7.5'
  compile 'joda-time:joda-time:2.10'
  compile 'javax.inject:javax.inject:1'
  compile 'io.swagger:swagger-annotations:1.5.16'
  compile 'org.apache.commons:commons-lang3:3.0'
  compile 'com.google.guava:guava:26.0-jre'
  compile "com.google.cloud:google-cloud-bigquery:1.122.2"

  implementation "org.mapstruct:mapstruct:${mapstructVersion}"
  annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
  testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

  compile 'com.google.api-client:google-api-client:1.30.10'
  compile 'com.auth0:java-jwt:3.10.3'

// https://mvnrepository.com/artifact/com.google.auth/google-auth-library-oauth2-http
  compile group: 'com.google.auth', name: 'google-auth-library-oauth2-http', version: '0.21.1'

  // https://github.com/GoogleCloudPlatform/google-cloud-java/issues/1502
  compile 'org.json:json:20160810'

  testCompile 'junit:junit:4.12'
  testCompile 'org.mockito:mockito-core:1.10.19'
  testCompile 'com.google.truth:truth:0.42'
  testCompile "org.springframework.boot:spring-boot-starter-test:${SPRING_BOOT_VERSION}"
  testCompile 'com.h2database:h2:1.4.194'
  testCompile 'org.liquibase:liquibase-core:3.5.3'
  testCompile 'org.bitbucket.radistao.test:before-after-spring-test-runner:0.1.0'

  // For Swagger generation. These should include dependencies found in the Swagger codegen
  // example here:
  // https://github.com/swagger-api/swagger-codegen/blob/v2.2.3/samples/client/petstore/spring-stubs/pom.xml
  generatedCompile "org.springframework.boot:spring-boot-starter-data-rest:${SPRING_BOOT_VERSION}"
  generatedCompile 'io.springfox:springfox-swagger2:2.6.1'
  generatedCompile 'io.springfox:springfox-swagger-ui:2.6.1'
  generatedCompile 'com.squareup.okhttp:okhttp:2.7.5'
  generatedCompile 'com.squareup.okhttp:logging-interceptor:2.7.5'
  generatedCompile 'com.google.code.gson:gson:2.8.9'
  generatedCompile 'joda-time:joda-time:2.10'
  generatedCompile "com.fasterxml.jackson.datatype:jackson-datatype-joda:${JACKSON_VERSION}"
}

swaggerSources {
  workbench {
    inputFile = file("$projectDir/$swaggerSourceFile")
  }
}

tasks.withType(Test) {
  testLogging {
    // Causes the correct line to be reported on an exception.
    exceptionFormat "full"
  }
  def verboseTestLogging=project.properties['verboseTestLogging'] ?: 'no'
  // To debug def verboseTestLogging='yes'
  if (verboseTestLogging == 'yes') {
    testLogging {
      events "passed", "skipped", "failed", "standardOut", "standardError"
    }
  } else {
    testLogging {
      events "passed", "skipped", "failed"
    }
  }
}

test {
  // Starting with a smaller minimum seems to help this task use memory more slowly.
  // Increase max heap size from default of 1024M in order to avoid OOM errors.
  // When Gradle runs out of memory, it fails with this message:
  //   Process 'Gradle Test Executor 1' finished with non-zero exit value 137
  // and literally nothing else in terms of helpful debugging information.
  minHeapSize = '128m'
  maxHeapSize = '2048m'
}

appengine {  // App Engine tasks configuration
  run {      // local (dev_appserver) configuration (standard environments only)
    port = 8083                 // default
    host = "0.0.0.0"
    // Allows you to attach a debugger on port 8001 when running locally.
    jvmFlags = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8002']
    // Give dev_appserver 2 minutes to start up when running appengineStart; by
    // default it will fail after 1 minute. (This is particularly a problem in CircleCI.)
    startSuccessTimeout = 120

    environment = [GOOGLE_APPLICATION_CREDENTIALS: file("$rootDir/sa-key.json").getAbsolutePath()]
  }

  // dmohs: You may see this message [1], but don't implement the suggested fix because it breaks
  // Spring.
  // [1] https://github.com/GoogleCloudPlatform/app-gradle-plugin/issues/100
  // stage {
  //    enableJarClasses = true
  // }

  deploy {   // deploy configuration
    stopPreviousVersion = true  // default - stop the current version
    promote = true              // default - & make this the current version
    // TODO(danrodney)
    //account = System.properties("account")
    //project = System.properties("project")
  }
}

group = 'org.pmiops.allofus.workbench'
version = '0.1.0'          // Version in generated output

sourceCompatibility = 1.8
targetCompatibility = 1.8
