buildscript {
    ext {
        GAE_VERSION = '2.0.26'
        GOOGLE_TRUTH_VERSION = '1.1.3'
        GSON_VERSION = '2.9.1'
        HIBERNATE_VERSION = '6.4.4.Final'
        SPRING_BOOT_VERSION = '3.2.0'
        SPRING_FRAMEWORK_VERSION = '6.1.5'
        SPRING_SECURITY_VERSION = '6.2.3'
        LOGBACK_VERSION = '1.5.5'
        JACKSON_VERSION = '2.16.1'
        SPRING_DEPENDENCY_MANAGEMENT_VERSION = '1.0.13.RELEASE'
        OKHTTP_VERSION = '4.12.0'
        LIQUIBASE_VERSION = '4.27.0'
        SWAGGER_3_CODEGEN_VERSION = '3.0.52'
        OPENCENSUS_VERSION = '0.23.0'
        MAPSTRUCT_VERSION = '1.5.5.Final'
    }

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://broadinstitute.jfrog.io/artifactory/libs-release-local' }
        jcenter() // Note: JCenter has been deprecated, use Maven Central when possible.
    }

    dependencies {
        classpath 'com.google.cloud.tools:appengine-gradle-plugin:2.8.0'
        classpath "com.google.http-client:google-http-client:1.41.1"
        classpath "junit:junit:4.12"
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'war'
    id 'org.springframework.boot' version '3.2.0'
    id 'org.owasp.dependencycheck' version '7.4.4'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'org.hidetake.swagger.generator' version '2.19.2'
    id 'com.google.cloud.tools.appengine-appenginewebxml' version '2.4.2'
}

def db_host = System.getenv("DB_HOST")
def db_port = System.getenv("DB_PORT")
def databrowser_db_user = System.getenv("DATABROWSER_DB_USER")
def databrowser_db_password = System.getenv("DATABROWSER_DB_PASSWORD")
def project_name = System.getenv("PROJECT")

def dbProperties = [
        'spring.datasource.driver-class-name': 'com.mysql.cj.jdbc.Driver',
        'spring.datasource.url': "jdbc:mysql://${db_host}:${db_port}/databrowser?useSSL=false",
        'spring.datasource.username': databrowser_db_user,
        'spring.datasource.password': databrowser_db_password
]

if (JavaVersion.current() != JavaVersion.VERSION_17) {
    throw new GradleException("This build must be run with Java 17. See developer-system-initialization.md")
}

task generate_local_appengine_web_xml(type: Exec) {
    executable "ruby"
    args "libproject/generate_appengine_web_xml.rb"
}

configurations {
    integrationCompile.extendsFrom testImplementation
    integrationRuntime.extendsFrom testRuntime
    integrationImplementation.extendsFrom implementation
    integrationRuntimeOnly.extendsFrom runtimeOnly
    __swaggerCodegenV3__
    generatedCompile
    all { exclude group: 'com.google.guava', module: 'guava-jdk5' }
    toolsImplementation.extendsFrom implementation
    toolsRuntimeOnly.extendsFrom runtimeOnly
    all*.exclude group: 'javax.annotation', module: 'jsr305'

    all {
        exclude group: 'org.apache.tomcat.embed', module: 'tomcat-embed-core'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }
}

ext {
    hibernateVersion = '6.4.4.Final'
    SWAGGER_CODEGEN_BASE_PKG = 'org.pmiops.workbench'
    SWAGGER_3_CODEGEN_DIR = "$buildDir/swagger3"
    SWAGGER_TEMPLATE_DIR = "$projectDir/src/main/resources"
    SWAGGER_3_RAW_OPTS = [
            '--ignore-file-override', "$projectDir/.swagger3-codegen-ignore"
    ]
}

sourceSets {
    generated {
        compileClasspath = configurations.generatedCompile
        java { srcDir SWAGGER_3_CODEGEN_DIR }
    }
    main {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
    test {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
    integration {
        java {
            compileClasspath += main.output + test.output + generated.output
            runtimeClasspath += main.output + test.output + generated.output
            srcDir file('src/integration/java')
        }
    }
    tools {
        compileClasspath += main.output + generated.output
        runtimeClasspath += main.output + generated.output
        resources { srcDir "tools/src/main/resources" }
        java {
            srcDirs = ['tools/src/main/java', 'src/main/java', 'src/generated/java']
            includes = ['org/pmiops/workbench/tools/**/*.java', 'org/pmiops/workbench/db/**/*.java']
            excludes = ['org/pmiops/workbench/db/dao/ConceptSetService.java', 'org/pmiops/workbench/db/dao/UserService.java']
        }
    }
}

tasks.classes.dependsOn 'generatedClasses'
tasks.ideaModule.dependsOn 'generateSwaggerCode'
tasks.compileGeneratedJava.dependsOn 'generateSwaggerCode'
tasks.war.dependsOn 'compileGeneratedJava', 'generate_local_appengine_web_xml'

task loadConfig(type: JavaExec) {
    classpath sourceSets.tools.runtimeClasspath
    main = "org.pmiops.workbench.tools.ConfigLoader"
    systemProperties = dbProperties
    if (project.hasProperty("config_key") && project.hasProperty("config_file")) {
        args config_key, config_file
    }
}

task updateCdrConfig(type: JavaExec) {
    classpath sourceSets.tools.runtimeClasspath
    main = "org.pmiops.workbench.tools.UpdateCdrVersions"
    systemProperties = dbProperties
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

task compileIntegration(type: JavaCompile) {
    sourceSets.integration.java.srcDirs = ['src/integration/java']
    classpath = sourceSets.main.compileClasspath
}

task integration(type: Test) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    systemProperties = ['DB_API_BASE_PATH': System.getenv('DB_API_BASE_PATH')]
    outputs.upToDateWhen { false }
}

task integrationTest(type: Test) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Run integration test suite.'
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    systemProperties = ['DB_API_BASE_PATH': System.getenv('DB_API_BASE_PATH')]
    outputs.upToDateWhen { false }
    useJUnitPlatform()
}

tasks.clean.doFirst {
    delete("${buildDir}/swagger3")
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor "org.mapstruct:mapstruct-processor:$project.ext.MAPSTRUCT_VERSION"
    __swaggerCodegenV3__ "io.swagger.codegen.v3:swagger-codegen-cli:$project.ext.SWAGGER_3_CODEGEN_VERSION"
    generatedCompile "org.springframework.boot:spring-boot-starter-data-rest:$project.ext.SPRING_BOOT_VERSION"
    generatedCompile "org.springframework.boot:spring-boot-starter-validation:$project.ext.SPRING_BOOT_VERSION"
    generatedCompile "com.squareup.okhttp3:okhttp:$project.ext.OKHTTP_VERSION"
    generatedCompile "com.squareup.okhttp3:logging-interceptor:$project.ext.OKHTTP_VERSION"
    generatedCompile "com.google.code.gson:gson:$project.ext.GSON_VERSION"
    generatedCompile 'io.swagger.core.v3:swagger-annotations:2.2.3'
    generatedCompile 'io.swagger.core.v3:swagger-models:2.2.3'
    generatedCompile 'io.gsonfire:gson-fire:1.8.5'
    generatedCompile 'org.threeten:threetenbp:1.6.2'

    implementation 'io.gsonfire:gson-fire:1.8.5'
    implementation 'org.threeten:threetenbp:1.6.2'
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.3'
    implementation 'io.swagger.core.v3:swagger-models:2.2.3'

    implementation "ch.qos.logback:logback-classic:$project.ext.LOGBACK_VERSION"
    implementation "ch.qos.logback:logback-core:$project.ext.LOGBACK_VERSION"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$project.ext.JACKSON_VERSION"
    implementation "com.fasterxml.jackson.core:jackson-core:$project.ext.JACKSON_VERSION"
    implementation "com.fasterxml.jackson.core:jackson-databind:$project.ext.JACKSON_VERSION"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$project.ext.JACKSON_VERSION"
    implementation "com.github.java-json-tools:json-patch:1.13"
    implementation "com.github.rholder:guava-retrying:2.0.0"
    implementation 'org.javers:javers-core:5.15.0'
    implementation "com.squareup.okhttp3:logging-interceptor:$project.ext.OKHTTP_VERSION"
    implementation "com.squareup.okhttp3:okhttp:$project.ext.OKHTTP_VERSION"
    implementation "org.liquibase:liquibase-core:$project.ext.LIQUIBASE_VERSION"
    implementation 'com.mysql:mysql-connector-j:8.3.0'
    implementation "org.apache.commons:commons-collections4:4.4"
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.commons:commons-text:1.10.0'
    implementation "org.apache.httpcomponents.client5:httpclient5:5.3.1"
    implementation "org.springframework.boot:spring-boot-starter-validation:$project.ext.SPRING_BOOT_VERSION"
    implementation "commons-codec:commons-codec:1.15"
    implementation 'com.auth0:java-jwt:3.19.2'
    implementation 'io.netty:netty-common:4.1.82.Final'
    implementation 'org.json:json:20231013'
    implementation("com.google.appengine:appengine-api-1.0-sdk:$project.ext.GAE_VERSION") {
        exclude group: 'com.google.api-client', module: 'google-api-client-servlet'
    }
    implementation 'com.google.apis:google-api-services-admin-directory:directory_v1-rev20220919-2.0.0'
    implementation 'com.google.apis:google-api-services-cloudbilling:v1-rev20220908-2.0.0'
    implementation 'com.google.apis:google-api-services-cloudresourcemanager:v3-rev20220925-2.0.0'
    implementation 'com.google.apis:google-api-services-oauth2:v2-rev20200213-2.0.0'
    implementation 'com.google.apis:google-api-services-iam:v1-rev20220825-2.0.0'
    implementation 'com.google.api-client:google-api-client-appengine:2.2.0'
    implementation 'com.google.auth:google-auth-library-appengine:1.23.0'
    implementation 'com.google.auth:google-auth-library-oauth2-http:1.23.0'
    implementation 'com.google.cloud.sql:mysql-socket-factory:1.7.0'
    implementation 'com.google.cloud:google-cloud-bigquery:2.25.0'
    implementation 'com.google.cloud:google-cloud-iamcredentials:2.41.0'
    implementation 'com.google.cloud:google-cloud-logging:3.11.5'
    implementation 'com.google.cloud:google-cloud-monitoring:3.40.0'
    implementation 'com.google.cloud:google-cloud-trace:2.39.0'
    implementation 'com.google.cloud:google-cloud-storage:2.13.0'
    implementation 'com.google.cloud:google-cloud-tasks:2.3.11'
    implementation "com.google.code.gson:gson:$project.ext.GSON_VERSION"
    implementation 'com.google.guava:guava:32.0.1-jre'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
    implementation 'com.google.protobuf:protobuf-java:3.25.3'
    implementation 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20211018.2'
    implementation "org.hibernate.orm:hibernate-core:$project.ext.HIBERNATE_VERSION"
    implementation "org.hibernate.orm:hibernate-community-dialects:$project.ext.HIBERNATE_VERSION"
    implementation('org.apache.tomcat:tomcat-jdbc:10.0.23')
    implementation("org.springframework.boot:spring-boot-starter-tomcat:$project.ext.SPRING_BOOT_VERSION")
    implementation("org.springframework.boot:spring-boot-starter-jdbc:$project.ext.SPRING_BOOT_VERSION") {
        exclude group: 'com.zaxxer', module: 'HikariCP'
    }
    implementation("org.springframework.boot:spring-boot-starter-data-jpa:$project.ext.SPRING_BOOT_VERSION") {
        exclude module: 'spring-boot-starter-tomcat'
        exclude group: 'org.slf4j', module: 'jul-to-slf4j'
    }
    implementation("org.springframework.boot:spring-boot-starter-web:$project.ext.SPRING_BOOT_VERSION") {
        exclude module: 'spring-boot-starter-tomcat'
        exclude group: 'org.slf4j', module: 'jul-to-slf4j'
    }
    implementation "org.springframework.retry:spring-retry"
    implementation "org.springframework.security:spring-security-core:$project.ext.SPRING_SECURITY_VERSION"
    implementation "org.springframework.security:spring-security-config:$project.ext.SPRING_SECURITY_VERSION"
    implementation "org.springframework.security:spring-security-crypto:$project.ext.SPRING_SECURITY_VERSION"
    implementation "org.springframework.security:spring-security-web:$project.ext.SPRING_SECURITY_VERSION"
    implementation 'org.bouncycastle:bcprov-jdk18on:1.78'
    implementation "org.springframework:spring-aop:$project.ext.SPRING_FRAMEWORK_VERSION"
    implementation "org.springframework:spring-aspects:$project.ext.SPRING_FRAMEWORK_VERSION"
    implementation "org.springframework:spring-beans:$project.ext.SPRING_FRAMEWORK_VERSION"
    implementation "org.springframework:spring-context:$project.ext.SPRING_FRAMEWORK_VERSION"
    implementation("org.springframework:spring-core:$project.ext.SPRING_FRAMEWORK_VERSION") {
        exclude group: 'org.springframework', module: 'spring-jcl'
    }
    implementation "org.springframework:spring-expression:$project.ext.SPRING_FRAMEWORK_VERSION"
    implementation "org.springframework:spring-jcl:$project.ext.SPRING_FRAMEWORK_VERSION"
    implementation "org.springframework:spring-jdbc:$project.ext.SPRING_FRAMEWORK_VERSION"
    implementation "org.springframework:spring-orm:$project.ext.SPRING_FRAMEWORK_VERSION"
    implementation "org.springframework:spring-test:$project.ext.SPRING_FRAMEWORK_VERSION"
    implementation "org.springframework:spring-tx:$project.ext.SPRING_FRAMEWORK_VERSION"
    implementation "org.springframework:spring-web:$project.ext.SPRING_FRAMEWORK_VERSION"
    implementation "org.springframework:spring-webmvc:$project.ext.SPRING_FRAMEWORK_VERSION"
    implementation "org.mapstruct:mapstruct:$project.ext.MAPSTRUCT_VERSION"
    implementation 'jakarta.mail:jakarta.mail-api:2.1.1'
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:$project.ext.MAPSTRUCT_VERSION"
    implementation group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '4.0.5'
    implementation "org.jetbrains:annotations:24.1.0"
    implementation "commons-logging:commons-logging:1.3.1"
    implementation "jakarta.servlet:jakarta.servlet-api:6.0.0"
    implementation "jakarta.inject:jakarta.inject-api:2.0.1"
    implementation 'jakarta.mail:jakarta.mail-api:2.1.3'
    implementation 'jakarta.activation:jakarta.activation-api:2.1.3'
    implementation 'jakarta.annotation:jakarta.annotation-api:3.0.0'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    generatedCompile "jakarta.xml.bind:jakarta.xml.bind-api:4.0.1"
    generatedCompile "jakarta.inject:jakarta.inject-api:2.0.1"
    generatedCompile 'jakarta.mail:jakarta.mail-api:2.1.3'
    generatedCompile 'jakarta.annotation:jakarta.annotation-api:3.0.0'
    generatedCompile 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    generatedCompile 'jakarta.validation:jakarta.validation-api:3.0.2'
    generatedCompile 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    providedCompile group: 'jakarta.servlet', name: 'jakarta.servlet-api', version: '6.0.0'
    toolsImplementation 'commons-cli:commons-cli:1.5.0'
    toolsImplementation 'com.opencsv:opencsv:5.7.0'
    testImplementation 'org.mockito:mockito-core:5.3.1'
    testImplementation "com.google.truth:truth:$project.ext.GOOGLE_TRUTH_VERSION"
    testImplementation "com.google.truth.extensions:truth-java8-extension:$project.ext.GOOGLE_TRUTH_VERSION"
    testImplementation 'com.h2database:h2:1.4.194'
    testImplementation "org.liquibase:liquibase-core:$project.ext.LIQUIBASE_VERSION"
    testImplementation 'org.bitbucket.radistao.test:before-after-spring-test-runner:0.1.0'
    testImplementation("org.springframework.boot:spring-boot-starter-test:$project.ext.SPRING_BOOT_VERSION") {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    integrationImplementation "com.google.truth:truth:$project.ext.GOOGLE_TRUTH_VERSION"
    integrationImplementation "com.google.truth.extensions:truth-java8-extension:$project.ext.GOOGLE_TRUTH_VERSION"
}

swaggerSources {
    databrowser {
        inputFile = file('src/main/resources/public-api.yaml')
        code {
            configuration = configurations.__swaggerCodegenV3__
            language = 'spring'
            outputDir = file(SWAGGER_3_CODEGEN_DIR)
            templateDir = file(SWAGGER_TEMPLATE_DIR)
            wipeOutputDir = false
            rawOptions = SWAGGER_3_RAW_OPTS
            additionalProperties = [
                    'apiPackage': 'org.pmiops.workbench.publicapi',
                    'modelPackage': 'org.pmiops.workbench.model',
                    'sourceFolder': '',
                    'useTags': 'true',
                    'delegatePattern': 'true',
                    'dateLibrary': 'java8',
                    'jakarta': 'true'
            ]
        }
    }

    databrowserApiClient {
        inputFile = file('src/main/resources/public-api.yaml')
        code {
            configuration = configurations.__swaggerCodegenV3__
            language = 'java'
            outputDir = file(SWAGGER_3_CODEGEN_DIR)
            templateDir = file(SWAGGER_TEMPLATE_DIR)
            wipeOutputDir = false
            rawOptions = SWAGGER_3_RAW_OPTS
            additionalProperties = [
                    'invokerPackage': 'org.pmiops.workbench.publicapi.client',
                    'modelPackage': 'org.pmiops.workbench.publicapi.client.model',
                    'apiPackage': 'org.pmiops.workbench.publicapi.client.api',
                    'library': 'okhttp4-gson',
                    'serializableModel': 'true',
                    'dateLibrary': 'java8',
                    'jakarta': 'true'
            ]
        }
    }

    workbenchClient {
        inputFile = file('src/main/resources/private-workbench.yaml')
        code {
            configuration = configurations.__swaggerCodegenV3__
            language = 'java'
            outputDir = file(SWAGGER_3_CODEGEN_DIR)
            templateDir = file(SWAGGER_TEMPLATE_DIR)
            wipeOutputDir = false
            rawOptions = SWAGGER_3_RAW_OPTS
            additionalProperties = [
                    'invokerPackage': 'org.pmiops.workbench.privateworkbench',
                    'modelPackage': 'org.pmiops.workbench.privateworkbench.model',
                    'apiPackage': 'org.pmiops.workbench.privateworkbench.api',
                    'library': 'okhttp4-gson',
                    'serializableModel': 'true',
                    'dateLibrary': 'java8',
                    'jakarta': 'true'
            ]
        }
    }
}

tasks.compileJava {
    dependsOn 'compileGeneratedJava'
    options.compilerArgs << '-Xlint:unchecked'
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
    }
    def verboseTestLogging = project.properties['verboseTestLogging'] ?: 'no'
    if (verboseTestLogging == 'yes') {
        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }
    } else {
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

test {
    minHeapSize = '128m'
    maxHeapSize = '2048m'
}

def cloudSdkHomePath = "/google-cloud-sdk"

if (System.getenv('CIRCLECI') == 'true') {
    cloudSdkHomePath = "/home/circleci/google-cloud-sdk"
} else if (System.getenv('PROJECT').equals("stable") || System.getenv('PROJECT').equals("prod")) {
    cloudSdkHomePath = "/root/google-cloud-sdk"
} else {
    cloudSdkHomePath = "/google-cloud-sdk"
}

println "cloudsdkhome"
println cloudSdkHomePath

println "Gradle Version: " + gradle.gradleVersion

appengine {
    tools {
        cloudSdkHome = cloudSdkHomePath
    }
    run {
        port = 8083
        host = "0.0.0.0"
        jvmFlags = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8002']
        startSuccessTimeout = 120
        environment = [GOOGLE_APPLICATION_CREDENTIALS: file("$rootDir/sa-key.json").getAbsolutePath()]
    }
    deploy {
        stopPreviousVersion = true
        promote = true
        projectId = "aou-db-test"
    }
}

group = 'org.pmiops.allofus.workbench'
version = '0.1.0'
sourceCompatibility = 17
targetCompatibility = 17