import io.swagger.codegen.DefaultGenerator
import io.swagger.codegen.config.CodegenConfigurator

def swaggerTemplateDir = 'src/main/resources'
def commonApiSourceFile = 'src/main/resources/common_api.yaml'
def swaggerTargetFolder = 'src/generated/java'

task generateCommonApi {
  inputs.file("$projectDir/$commonApiSourceFile")
  outputs.dir("$projectDir/$swaggerTargetFolder")
  doLast {
    def config = new CodegenConfigurator()
    config.setInputSpec("file:///$projectDir/$commonApiSourceFile")
    config.setOutputDir("$projectDir")
    config.setTemplateDir("$projectDir/$swaggerTemplateDir")
    config.setLang('spring')
    config.setAdditionalProperties([
            'apiPackage'     : 'org.pmiops.workbench.api',
            'modelPackage'   : 'org.pmiops.workbench.model',
            'sourceFolder'   : swaggerTargetFolder,
            'useTags'        : 'true',
            // Generates delegate interfaces; used to make method annotations work without
            // having to copy them to our implementations.
            'delegatePattern': 'true'
    ])
    new DefaultGenerator().opts(config.toClientOptInput()).generate()
  }
}


buildscript {    // Configuration for building
  repositories {
    jcenter()    // Bintray's repository - a fast Maven Central mirror & more
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.3.RELEASE'
    classpath 'gradle.plugin.org.hidetake:gradle-swagger-generator-plugin:2.12.0'
    classpath 'io.swagger:swagger-codegen:2.2.3'
  }
}

ext['hibernate.version'] = '5.2.10.Final'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.hidetake.swagger.generator'

configurations {
  generatedCompile
  all {
    exclude group: 'com.google.guava', module:'guava-jdk5'
  }
}

sourceSets {
  generated {
    compileClasspath = configurations.generatedCompile
  }
  main {
    compileClasspath += generated.output
    runtimeClasspath += generated.output
  }
  test {
    compileClasspath += generated.output
    runtimeClasspath += generated.output
  }
}

generateCommonApi.dependsOn validateSwagger
ideaModule.dependsOn generateCommonApi
compileGeneratedJava.dependsOn generateCommonApi
classes.dependsOn generatedClasses
compileJava.dependsOn compileGeneratedJava

clean.doFirst {
  delete("${projectDir}/$swaggerTargetFolder")
}

repositories {   // repositories for Jar's you access in your code
  jcenter()
}

dependencies {
  // To show the dependency tree, try: ./project.rb gradle dependencies --configuration compile
  compile 'javax.servlet:javax.servlet-api:3.0.1'
  compile 'joda-time:joda-time:2.10'
  compile 'javax.inject:javax.inject:1'
  compile 'com.google.guava:guava:26.0-jre'
  compile 'org.hibernate:hibernate-ehcache:5.0.12.Final'
  compile 'org.apache.commons:commons-lang3:3.0'
  compile('org.springframework.boot:spring-boot-starter-web') {
    exclude module: 'spring-boot-starter-tomcat'
    exclude group: 'org.slf4j', module: 'jul-to-slf4j'
  }
  compile('org.springframework.boot:spring-boot-starter-data-jpa') {
    exclude module: 'spring-boot-starter-tomcat'
    exclude group: 'org.slf4j', module: 'jul-to-slf4j'
  }
  compile 'io.swagger:swagger-annotations:1.5.16'
  compile 'com.google.code.gson:gson:2.8.5'
  compile 'org.hibernate:hibernate-core:5.2.10.Final'

  testCompile 'junit:junit:4.12'
  testCompile 'org.mockito:mockito-core:1.10.19'
  testCompile 'com.google.truth:truth:0.42'
  testCompile 'com.h2database:h2:1.4.194'
  testCompile 'org.liquibase:liquibase-core:3.5.3'
  testCompile 'org.bitbucket.radistao.test:before-after-spring-test-runner:0.1.0'

  // For Swagger generation. These should include dependencies found in the Swagger codegen
  // example here:
  // https://github.com/swagger-api/swagger-codegen/blob/v2.2.3/samples/client/petstore/spring-stubs/pom.xml
  generatedCompile 'org.springframework.boot:spring-boot-starter-data-rest'
  generatedCompile 'io.springfox:springfox-swagger2:2.6.1'
  generatedCompile 'io.springfox:springfox-swagger-ui:2.6.1'
  generatedCompile 'com.squareup.okhttp:okhttp:2.7.5'
  generatedCompile 'com.squareup.okhttp:logging-interceptor:2.7.5'
  generatedCompile 'com.google.code.gson:gson:2.8.5'
  generatedCompile 'joda-time:joda-time:2.10'
  generatedCompile 'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.9.6'

}

tasks.withType(Test) {
  testLogging {
    // Causes the correct line to be reported on an exception.
    exceptionFormat "full"
  }
  def verboseTestLogging=project.properties['verboseTestLogging'] ?: 'no'
  if (verboseTestLogging == 'yes') {
    testLogging {
      events "passed", "skipped", "failed", "standardOut", "standardError"
    }
  } else {
    testLogging {
      events "passed", "skipped", "failed"
    }
  }
}

test {
  // Starting with a smaller minimum seems to help this task use memory more slowly.
  // Increase max heap size from default of 1024M in order to avoid OOM errors.
  // When Gradle runs out of memory, it fails with this message:
  //   Process 'Gradle Test Executor 1' finished with non-zero exit value 137
  // and literally nothing else in terms of helpful debugging information.
  minHeapSize = '128m'
  maxHeapSize = '2048m'
}

group = 'org.pmiops.allofus.workbench'
version = '0.1.0'          // Version in generated output

sourceCompatibility = 1.8
targetCompatibility = 1.8
